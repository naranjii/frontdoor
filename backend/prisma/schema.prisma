generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Institution {
  id              String   @id @default(uuid())
  institutionName String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  staffs          Staff[]

  @@unique([id, institutionName])
}

model Staff {
  id              String      @id @default(uuid())
  institutionName String
  institutionId   String
  institution     Institution @relation(fields: [institutionId, institutionName], references: [id, institutionName], map: "Staff_institution_fkey")

  username  String    @unique
  name      String
  password  String
  role      StaffRole @default(RECEPTIONIST)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  guests      Guest[]
  patients    Patient[]
  logbooks    Logbook[]
  Appointment Appointment[]
}

model Guest {
  id           String   @id @default(uuid())
  name         String
  contact      String?
  organization String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdById String
  createdBy   Staff  @relation(fields: [createdById], references: [id], map: "Guest_createdBy_fkey")

  logbooks Logbook[]
}

model Patient {
  id           String  @id @default(uuid())
  isActive     Boolean @default(true)
  name         String
  age          Int
  healthcare   String?
  patientCode  Int?
  supportLevel Int?
  notes        String?
  checked      Boolean @default(false)
  driveLink    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  createdBy   Staff  @relation(fields: [createdById], references: [id], map: "Patient_createdBy_fkey")

  history     Logbook[]
  Appointment Appointment[]
}

model Appointment {
  id            String   @id @default(uuid())
  appointmentAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  therapist String?
  notes     String?

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], map: "Appointment_patient_fkey")

  createdById String
  createdBy   Staff  @relation(fields: [createdById], references: [id], map: "Appointment_createdBy_fkey")
}

model Logbook {
  id        String   @id @default(uuid())
  checkIn   DateTime @default(now())
  checkOut  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String
  createdBy   Staff  @relation(fields: [createdById], references: [id], map: "Logbook_createdBy_fkey")

  guestId   String?
  guest     Guest?   @relation(fields: [guestId], references: [id], map: "Logbook_guest_fkey")
  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id], map: "Logbook_patient_fkey")
}

enum StaffRole {
  ADMIN
  RECEPTIONIST
  COORDINATOR
}
